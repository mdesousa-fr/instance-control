// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.7
// Revision: bf63e108589bbd2327b13ec2c5da532aad234029
// Build Date: 2023-07-25T23:27:55Z
// Built By: goreleaser

package main

import (
	"fmt"
	"strings"
)

const (
	// ActionTypeStart is a ActionType of type Start.
	ActionTypeStart ActionType = iota
	// ActionTypeStop is a ActionType of type Stop.
	ActionTypeStop
)

var ErrInvalidActionType = fmt.Errorf("not a valid ActionType, try [%s]", strings.Join(_ActionTypeNames, ", "))

const _ActionTypeName = "startstop"

var _ActionTypeNames = []string{
	_ActionTypeName[0:5],
	_ActionTypeName[5:9],
}

// ActionTypeNames returns a list of possible string values of ActionType.
func ActionTypeNames() []string {
	tmp := make([]string, len(_ActionTypeNames))
	copy(tmp, _ActionTypeNames)
	return tmp
}

var _ActionTypeMap = map[ActionType]string{
	ActionTypeStart: _ActionTypeName[0:5],
	ActionTypeStop:  _ActionTypeName[5:9],
}

// String implements the Stringer interface.
func (x ActionType) String() string {
	if str, ok := _ActionTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ActionType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ActionType) IsValid() bool {
	_, ok := _ActionTypeMap[x]
	return ok
}

var _ActionTypeValue = map[string]ActionType{
	_ActionTypeName[0:5]: ActionTypeStart,
	_ActionTypeName[5:9]: ActionTypeStop,
}

// ParseActionType attempts to convert a string to a ActionType.
func ParseActionType(name string) (ActionType, error) {
	if x, ok := _ActionTypeValue[name]; ok {
		return x, nil
	}
	return ActionType(0), fmt.Errorf("%s is %w", name, ErrInvalidActionType)
}
